{"mappings":"gfAOA,IAAAA,EAAAC,EAAA,SAsDA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MA7DMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBAEF,IAIIC,EAAAF,EAAEG,cAAcC,SAHlBC,EAGEH,EAHFb,MACAiB,EAEEJ,EAFFK,KACAC,EACEN,EADFO,OAGEC,EAAQC,OAAON,EAAWO,OACxBL,EAAOI,OAAOL,EAAUM,OACxBH,EAASE,OAAOH,EAAYI,OAElC,IAAKF,GAASD,GAAU,EAEtB,OADAT,EAAEG,cAAcU,QACT5B,EAAA6B,OAAOC,QAAQ,yBAGxB,IAAK,IAAIC,EAAM,EAAGA,GAAOP,EAAQO,GAAO,EACtC7B,EAAc6B,EAAKN,GAChBO,MAAK,SAAAC,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MACjBJ,EAAA6B,OAAOK,QAAQ,uBAAwCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,UAE9DgC,OAAM,SAAAH,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClBJ,EAAA6B,OAAOQ,QAAQ,sBAAuCF,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,UAEhEqB,GAASH,K","sources":["src/js/03-promises.js"],"sourcesContent":["// 1 HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// 2 Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n//     і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  const {\n    delay: delayInput,\n    step: stepInput,\n    amount: amountInput,\n  } = e.currentTarget.elements;\n\n  let delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if ((delay || amount) < 0) {\n    e.currentTarget.reset();\n    return Notify.warning('Write positive values');\n  }\n\n  for (let pos = 1; pos <= amount; pos += 1) {\n    createPromise(pos, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n  // const intervalId = setInterval(() => {\n  //   if (position > 0) {\n  //     step = Number(stepInput.value);\n  //     console.log(position);\n  //   }\n  //   if (amount === position) {\n  //     return clearInterval(intervalId);\n  //   }\n  //   position += 1;\n  //   createPromise(position, delay)\n  //     .then(({ position, delay }) => {\n  //       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     });\n  //   delay += step;\n  // }, step);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delayInput","stepInput","step","amountInput","amount","delay1","Number","value","reset","Notify","warning","pos","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.d9ccbefd.js.map"}