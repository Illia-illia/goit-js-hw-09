{"mappings":"oeAOA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBAEF,MACEC,MAAOC,EACPC,KAAMC,EACNC,OAAQC,GACNP,EAAEQ,cAAcC,SAEpB,IAAIC,EAAW,EACXC,EAAQC,OAAOT,EAAWU,OAC1BT,EAAOQ,OAAOP,EAAUQ,OAC5B,MAAMP,EAASM,OAAOL,EAAYM,OAElC,IAAKF,GAASL,GAAU,EAEtB,OADAN,EAAEQ,cAAcM,QACTnB,EAAAoB,OAAOC,QAAQ,yBAGxB,MAAMC,EAAaC,aAAY,KAC7B,GAAIZ,IAAWI,EACb,OAAOS,cAAcF,GAGvBP,GAAY,EAYhB,SAAuBU,EAAUlB,GAC/B,MAAMmB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEL,E,MAAUlB,IAEpBwB,EAAO,C,SAAEN,E,MAAUlB,MAEpBA,MApBH0B,CAAclB,EAAUC,GACrBkB,MAAK,EAACT,SAAEA,EAAQlB,MAAEA,MACjBP,EAAAoB,OAAOe,QAAQ,uBAAqBV,QAAiBlB,UAEtD6B,OAAM,EAACX,SAAEA,EAAQlB,MAAEA,MAClBP,EAAAoB,OAAOiB,QAAQ,sBAAoBZ,QAAelB,UAEtDS,GAASP,IACRA","sources":["src/js/03-promises.js"],"sourcesContent":["// 1 HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// 2 Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n//     і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  const {\n    delay: delayInput,\n    step: stepInput,\n    amount: amountInput,\n  } = e.currentTarget.elements;\n\n  let position = 0;\n  let delay = Number(delayInput.value);\n  let step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if ((delay || amount) < 0) {\n    e.currentTarget.reset();\n    return Notify.warning('Write positive values');\n  }\n\n  const intervalId = setInterval(() => {\n    if (amount === position) {\n      return clearInterval(intervalId);\n    }\n\n    position += 1;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }, step);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","document","querySelector","addEventListener","e","preventDefault","delay","delayInput","step","stepInput","amount","amountInput","currentTarget","elements","position1","delay1","Number","value","reset","Notify","warning","intervalId","setInterval","clearInterval","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","success","catch","failure"],"version":3,"file":"03-promises.5592a4cc.js.map"}