{"mappings":"oeAOA,IAAAA,EAAAC,EAAA,SAsDA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MA7DMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBAEF,MACEZ,MAAOa,EACPC,KAAMC,EACNC,OAAQC,GACNN,EAAEO,cAAcC,SAEpB,IAAIC,EAAQC,OAAOR,EAAWS,OAC9B,MAAMR,EAAOO,OAAON,EAAUO,OACxBN,EAASK,OAAOJ,EAAYK,OAElC,IAAKF,GAASJ,GAAU,EAEtB,OADAL,EAAEO,cAAcK,QACT3B,EAAA4B,OAAOC,QAAQ,yBAGxB,IAAK,IAAIC,EAAM,EAAGA,GAAOV,EAAQU,GAAO,EACtC5B,EAAc4B,EAAKN,GAChBO,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA4B,OAAOI,QAAQ,uBAAqB7B,QAAiBC,UAEtD6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA4B,OAAOM,QAAQ,sBAAoB/B,QAAiBC,UAExDoB,GAASN","sources":["src/js/03-promises.js"],"sourcesContent":["// 1 HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// 2 Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n//     і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  const {\n    delay: delayInput,\n    step: stepInput,\n    amount: amountInput,\n  } = e.currentTarget.elements;\n\n  let delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if ((delay || amount) < 0) {\n    e.currentTarget.reset();\n    return Notify.warning('Write positive values');\n  }\n\n  for (let pos = 1; pos <= amount; pos += 1) {\n    createPromise(pos, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n  // const intervalId = setInterval(() => {\n  //   if (position > 0) {\n  //     step = Number(stepInput.value);\n  //     console.log(position);\n  //   }\n  //   if (amount === position) {\n  //     return clearInterval(intervalId);\n  //   }\n  //   position += 1;\n  //   createPromise(position, delay)\n  //     .then(({ position, delay }) => {\n  //       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     });\n  //   delay += step;\n  // }, step);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayInput","step","stepInput","amount","amountInput","currentTarget","elements","delay1","Number","value","reset","Notify","warning","pos","then","success","catch","failure"],"version":3,"file":"03-promises.b504d39b.js.map"}