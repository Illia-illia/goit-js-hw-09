{"mappings":"oeAOA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,QAASC,SAASC,cAAc,uBAChCC,OAAQF,SAASC,cAAc,sBAC/BE,SAAUH,SAASC,cAAc,wBACjCG,KAAMJ,SAASC,cAAc,UAG/BH,EAAKM,KAAKC,iBAAiB,UAE3B,SAAoBC,GAClBA,EAAEC,iBAEF,IAAIC,EAAW,EACXC,EAAQC,OAAOZ,EAAKC,QAAQY,OAEhC,MAAMC,EAAOF,OAAOZ,EAAKI,OAAOS,OAC1BE,EAASH,OAAOZ,EAAKK,SAASQ,OACpCG,YAAW,KACT,MAAMC,EAAaC,aAAY,KAC7B,GAAIH,IAAWL,EACb,OAAOS,cAAcF,GAEvBP,GAAY,EAalB,SAAuBU,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,OAlBnBO,CAAclB,EAAUC,GACrBkB,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBvB,EAAAgC,OAAOC,QAAQ,uBAAqBX,QAAiBC,UAEtDW,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClBvB,EAAAgC,OAAOG,QAAQ,sBAAoBb,QAAeC,UAEtDV,GAASG,IACRA,KACFH","sources":["src/js/03-promises.js"],"sourcesContent":["// 1 HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// 2 Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n//     і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  let position = 0;\n  let delay = Number(refs.delayEl.value);\n\n  const step = Number(refs.stepEl.value);\n  const amount = Number(refs.amountEl.value);\n  setTimeout(() => {\n    const intervalId = setInterval(() => {\n      if (amount === position) {\n        return clearInterval(intervalId);\n      }\n      position += 1;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      delay += step;\n    }, step);\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","delayEl","document","querySelector","stepEl","amountEl","form","addEventListener","e","preventDefault","position1","delay1","Number","value","step","amount","setTimeout","intervalId","setInterval","clearInterval","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.db352921.js.map"}