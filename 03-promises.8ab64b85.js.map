{"mappings":"gfAOA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,QAASC,SAASC,cAAc,uBAChCC,OAAQF,SAASC,cAAc,sBAC/BE,SAAUH,SAASC,cAAc,wBACjCG,KAAMJ,SAASC,cAAc,UAmC/B,SAASI,EAAcC,EAAUC,GACTC,KAAKC,SAAW,GAGpCb,EAAAc,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,OAG7DX,EAAAc,OAAOG,QAAQ,sBAAqCD,OAAfN,EAAS,QAAYM,OAANL,EAAM,OAvC9DT,EAAKM,KAAKU,iBAAiB,UAE3B,SAAoBC,GAClBA,EAAEC,iBAEF,IAAIC,EAAW,EACXV,EAAQW,OAAOpB,EAAKC,QAAQoB,OAC1BC,EAAOF,OAAOpB,EAAKI,OAAOiB,OAC1BE,EAASH,OAAOpB,EAAKK,SAASgB,OAEpC,GAAa,IAATC,EACFE,YAAW,WACT,IAAMC,EAAaC,aAAY,WAG7B,GADAnB,EADAY,GAAY,EACYV,GACpBc,IAAWJ,EACb,OAAOQ,cAAcF,KAEtB,KACFhB,QAEH,IAAMmB,EAAaF,aAAY,WAI7B,GAFAnB,EADAY,GAAY,EACYV,GACxBA,GAASa,EACLC,IAAWJ,EACb,OAAOQ,cAAcC,KAEtBnB,M","sources":["src/js/03-promises.js"],"sourcesContent":["// 1 HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// 2 Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n//     і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  let iterator = 0;\n  let delay = Number(refs.delayEl.value);\n  const step = Number(refs.stepEl.value);\n  const amount = Number(refs.amountEl.value);\n\n  if (step === 0) {\n    setTimeout(() => {\n      const intervalID = setInterval(() => {\n        iterator += 1;\n        createPromise(iterator, delay);\n        if (amount === iterator) {\n          return clearInterval(intervalID);\n        }\n      }, 0);\n    }, delay);\n  } else {\n    const intervalID = setInterval(() => {\n      iterator += 1;\n      createPromise(iterator, delay);\n      delay += step;\n      if (amount === iterator) {\n        return clearInterval(intervalID);\n      }\n    }, delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    // Reject\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delayEl","document","querySelector","stepEl","amountEl","form","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","Notify","success","concat","failure","addEventListener","e","preventDefault","iterator","Number","value","step","amount","setTimeout","intervalID","setInterval","clearInterval","intervalID1"],"version":3,"file":"03-promises.8ab64b85.js.map"}